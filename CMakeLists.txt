cmake_minimum_required(VERSION 3.23)

project(coro-cloudstorage CXX C)

option(BUILD_SHARED_LIBS "build shared libs" OFF)
option(BUILD_EXAMPLES "build examples" ON)

find_package(coro-http REQUIRED)
list(APPEND CMAKE_MODULE_PATH ${coro-http_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

find_package(duktape 2.4.0 CONFIG QUIET)
if(duktape_FOUND)
    add_library(duktape::duktape INTERFACE IMPORTED)
    target_include_directories(duktape::duktape INTERFACE ${DUKTAPE_INCLUDE_DIRS})
    target_link_libraries(duktape::duktape INTERFACE ${DUKTAPE_LIBRARIES})
else()
    find_package(PkgConfig REQUIRED)
    pkg_check_modules(PkgConfigDuktape REQUIRED duktape>=2.4.0 IMPORTED_TARGET)
    add_library(duktape::duktape ALIAS PkgConfig::PkgConfigDuktape)
endif()

find_package(nlohmann_json 3.9.1 REQUIRED)
find_package(fmt 8.0.0 REQUIRED)
find_package(pugixml 1.11 REQUIRED)
find_package(Libevent 2.1.12 REQUIRED)
find_package(SqliteOrm 1.8.0 REQUIRED)

find_package(FFMPEG 4.4 QUIET)
if(FFMPEG_FOUND)
    foreach(TARGET IN ITEMS avcodec avformat avutil avfilter swscale swresample)
        add_library(FFMPEG::${TARGET} INTERFACE IMPORTED)
        target_include_directories(FFMPEG::${TARGET} INTERFACE ${FFMPEG_INCLUDE_DIRS})
        target_link_directories(FFMPEG::${TARGET} INTERFACE ${FFMPEG_LIBRARY_DIRS})
        target_link_libraries(FFMPEG::${TARGET} INTERFACE ${FFMPEG_LIBRARIES})
    endforeach()
else()
    find_package(PkgConfig REQUIRED)
    pkg_check_modules(avcodec REQUIRED libavcodec>=58.134.100 IMPORTED_TARGET)
    pkg_check_modules(avformat REQUIRED libavformat>=58.76.100 IMPORTED_TARGET)
    pkg_check_modules(avutil REQUIRED libavutil>=56.70.100 IMPORTED_TARGET)
    pkg_check_modules(avfilter REQUIRED libavfilter>=7.110.100 IMPORTED_TARGET)
    pkg_check_modules(swscale REQUIRED libswscale>=5.9.100 IMPORTED_TARGET)
    pkg_check_modules(swresample REQUIRED libswresample>=3.9.100 IMPORTED_TARGET)
    foreach(TARGET IN ITEMS avcodec avformat avutil avfilter swscale swresample)
        add_library(FFMPEG::${TARGET} ALIAS PkgConfig::${TARGET})
    endforeach()
endif()

find_package(cryptopp QUIET)
if(NOT cryptopp_FOUND)
    find_path(CRYPTOPP_INCLUDE cryptopp/config.h REQUIRED)
    find_library(CRYPTOPP_LIBRARY cryptopp cryptopp-static REQUIRED)
    add_library(cryptopp::cryptopp INTERFACE IMPORTED)
    target_include_directories(cryptopp::cryptopp INTERFACE ${CRYPTOPP_INCLUDE})
    target_link_libraries(cryptopp::cryptopp INTERFACE ${CRYPTOPP_LIBRARY})
endif()

if(CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
    find_package(cppwinrt CONFIG REQUIRED)
endif()

add_subdirectory(src)
if(BUILD_EXAMPLES)
    add_subdirectory(examples)
endif()
