project(coro-cloudstorage CXX C)
cmake_minimum_required(VERSION 3.17)

option(BUILD_SHARED_LIBS "build shared libs" OFF)

list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/contrib/coro-http/cmake)

find_package(nlohmann_json 3.9.1 REQUIRED)
find_package(fmt 8.0.0 REQUIRED)
find_package(pugixml 1.11 REQUIRED)
find_package(Libevent 2.1.12 REQUIRED)

include(FindPkgConfig)
if(PKG_CONFIG_FOUND)
    pkg_check_modules(avcodec REQUIRED libavcodec>=58.134.100)
    pkg_check_modules(avformat REQUIRED libavformat>=58.76.100)
    pkg_check_modules(avutil REQUIRED libavutil>=56.70.100)
    pkg_check_modules(avfilter REQUIRED libavfilter>=7.110.100)
    pkg_check_modules(swscale REQUIRED libswscale>=5.9.100)
    pkg_check_modules(swresample REQUIRED libswresample>=3.9.100)
    add_library(FFMPEG::avcodec ALIAS PkgConfig::avcodec)
    add_library(FFMPEG::avformat ALIAS PkgConfig::avformat)
    add_library(FFMPEG::avutil ALIAS PkgConfig::avutil)
    add_library(FFMPEG::avfilter ALIAS PkgConfig::avfilter)
    add_library(FFMPEG::swscale ALIAS PkgConfig::swscale)
    add_library(FFMPEG::swresample ALIAS PkgConfig::swresample)
else()
    find_package(FFMPEG 4.4 REQUIRED)
    set(FFMPEG_DEPS_LIBRARY ${FFMPEG_DEPS_LIBRARY} CACHE STRING "ffmpeg extra dependencies")
    add_library(swresample INTERFACE)
    add_library(FFMPEG::swresample ALIAS swresample)
    target_include_directories(swresample INTERFACE "${FFMPEG_libswresample_INCLUDE_DIRS}")
    target_link_libraries(swresample INTERFACE ${FFMPEG_libswresample_LIBRARY} ${FFMPEG_DEPS_LIBRARY})
    add_library(avcodec INTERFACE)
    add_library(FFMPEG::avcodec ALIAS avcodec)
    target_include_directories(avcodec INTERFACE "${FFMPEG_libavcodec_INCLUDE_DIRS}")
    target_link_libraries(avcodec INTERFACE ${FFMPEG_libavcodec_LIBRARY} FFMPEG::swresample ${FFMPEG_DEPS_LIBRARY})
    add_library(avformat INTERFACE)
    add_library(FFMPEG::avformat ALIAS avformat)
    target_include_directories(avformat INTERFACE "${FFMPEG_libavformat_INCLUDE_DIRS}")
    target_link_libraries(avformat INTERFACE ${FFMPEG_libavformat_LIBRARY} ${FFMPEG_DEPS_LIBRARY})
    add_library(avutil INTERFACE)
    add_library(FFMPEG::avutil ALIAS avutil)
    target_include_directories(avutil INTERFACE "${FFMPEG_libavutil_INCLUDE_DIRS}")
    target_link_libraries(avutil INTERFACE ${FFMPEG_libavutil_LIBRARY} ${FFMPEG_DEPS_LIBRARY})
    add_library(avfilter INTERFACE)
    add_library(FFMPEG::avfilter ALIAS avfilter)
    target_include_directories(avfilter INTERFACE "${FFMPEG_libavfilter_INCLUDE_DIRS}")
    target_link_libraries(avfilter INTERFACE ${FFMPEG_libavfilter_LIBRARY} FFMPEG::swresample ${FFMPEG_DEPS_LIBRARY})
    add_library(swscale INTERFACE)
    add_library(FFMPEG::swscale ALIAS swscale)
    target_include_directories(swscale INTERFACE "${FFMPEG_libswscale_INCLUDE_DIRS}")
    target_link_libraries(swscale INTERFACE ${FFMPEG_libswscale_LIBRARY} ${FFMPEG_DEPS_LIBRARY})
endif()

find_path(CRYPTOPP_INCLUDE cryptopp/config.h REQUIRED)
find_library(CRYPTOPP_LIBRARY cryptopp cryptopp-static REQUIRED)
add_library(cryptopp::cryptopp UNKNOWN IMPORTED)
set_target_properties(cryptopp::cryptopp
    PROPERTIES
        IMPORTED_LOCATION "${CRYPTOPP_LIBRARY}"
        INTERFACE_INCLUDE_DIRECTORIES "${CRYPTOPP_INCLUDE}"
)

add_subdirectory(contrib)
add_subdirectory(src)
add_subdirectory(examples)
